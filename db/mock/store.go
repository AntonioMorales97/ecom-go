// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AntonioMorales97/ecom-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/AntonioMorales97/ecom-go/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateProductCategory mocks base method.
func (m *MockStore) CreateProductCategory(arg0 context.Context, arg1 string) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductCategory indicates an expected call of CreateProductCategory.
func (mr *MockStoreMockRecorder) CreateProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductCategory", reflect.TypeOf((*MockStore)(nil).CreateProductCategory), arg0, arg1)
}

// CreateProductInventory mocks base method.
func (m *MockStore) CreateProductInventory(arg0 context.Context, arg1 int32) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductInventory indicates an expected call of CreateProductInventory.
func (mr *MockStoreMockRecorder) CreateProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductInventory", reflect.TypeOf((*MockStore)(nil).CreateProductInventory), arg0, arg1)
}

// CreateProductOrder mocks base method.
func (m *MockStore) CreateProductOrder(arg0 context.Context, arg1 db.CreateProductOrderParams) (db.ProductOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductOrder", arg0, arg1)
	ret0, _ := ret[0].(db.ProductOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductOrder indicates an expected call of CreateProductOrder.
func (mr *MockStoreMockRecorder) CreateProductOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductOrder", reflect.TypeOf((*MockStore)(nil).CreateProductOrder), arg0, arg1)
}

// CreateProductOrderTx mocks base method.
func (m *MockStore) CreateProductOrderTx(arg0 context.Context, arg1 db.CreateProductOrderParams) (db.CreateProductOrderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateProductOrderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductOrderTx indicates an expected call of CreateProductOrderTx.
func (mr *MockStoreMockRecorder) CreateProductOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductOrderTx", reflect.TypeOf((*MockStore)(nil).CreateProductOrderTx), arg0, arg1)
}

// CreateProductTx mocks base method.
func (m *MockStore) CreateProductTx(arg0 context.Context, arg1 db.CreateProductTxParams) (db.CreateProductResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateProductResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductTx indicates an expected call of CreateProductTx.
func (mr *MockStoreMockRecorder) CreateProductTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductTx", reflect.TypeOf((*MockStore)(nil).CreateProductTx), arg0, arg1)
}

// CreateProductType mocks base method.
func (m *MockStore) CreateProductType(arg0 context.Context, arg1 string) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductType", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductType indicates an expected call of CreateProductType.
func (mr *MockStoreMockRecorder) CreateProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductType", reflect.TypeOf((*MockStore)(nil).CreateProductType), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// DeleteProductCategory mocks base method.
func (m *MockStore) DeleteProductCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCategory indicates an expected call of DeleteProductCategory.
func (mr *MockStoreMockRecorder) DeleteProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCategory", reflect.TypeOf((*MockStore)(nil).DeleteProductCategory), arg0, arg1)
}

// DeleteProductInventory mocks base method.
func (m *MockStore) DeleteProductInventory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductInventory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductInventory indicates an expected call of DeleteProductInventory.
func (mr *MockStoreMockRecorder) DeleteProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductInventory", reflect.TypeOf((*MockStore)(nil).DeleteProductInventory), arg0, arg1)
}

// DeleteProductOrder mocks base method.
func (m *MockStore) DeleteProductOrder(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductOrder indicates an expected call of DeleteProductOrder.
func (mr *MockStoreMockRecorder) DeleteProductOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductOrder", reflect.TypeOf((*MockStore)(nil).DeleteProductOrder), arg0, arg1)
}

// DeleteProductType mocks base method.
func (m *MockStore) DeleteProductType(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductType indicates an expected call of DeleteProductType.
func (mr *MockStoreMockRecorder) DeleteProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductType", reflect.TypeOf((*MockStore)(nil).DeleteProductType), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetProductCategory mocks base method.
func (m *MockStore) GetProductCategory(arg0 context.Context, arg1 int64) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCategory indicates an expected call of GetProductCategory.
func (mr *MockStoreMockRecorder) GetProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCategory", reflect.TypeOf((*MockStore)(nil).GetProductCategory), arg0, arg1)
}

// GetProductInventory mocks base method.
func (m *MockStore) GetProductInventory(arg0 context.Context, arg1 int64) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInventory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInventory indicates an expected call of GetProductInventory.
func (mr *MockStoreMockRecorder) GetProductInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInventory", reflect.TypeOf((*MockStore)(nil).GetProductInventory), arg0, arg1)
}

// GetProductInventoryForProduct mocks base method.
func (m *MockStore) GetProductInventoryForProduct(arg0 context.Context, arg1 int64) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInventoryForProduct", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInventoryForProduct indicates an expected call of GetProductInventoryForProduct.
func (mr *MockStoreMockRecorder) GetProductInventoryForProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInventoryForProduct", reflect.TypeOf((*MockStore)(nil).GetProductInventoryForProduct), arg0, arg1)
}

// GetProductInventoryForProductForUpdate mocks base method.
func (m *MockStore) GetProductInventoryForProductForUpdate(arg0 context.Context, arg1 int64) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductInventoryForProductForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductInventoryForProductForUpdate indicates an expected call of GetProductInventoryForProductForUpdate.
func (mr *MockStoreMockRecorder) GetProductInventoryForProductForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductInventoryForProductForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductInventoryForProductForUpdate), arg0, arg1)
}

// GetProductOrder mocks base method.
func (m *MockStore) GetProductOrder(arg0 context.Context, arg1 int64) (db.ProductOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductOrder", arg0, arg1)
	ret0, _ := ret[0].(db.ProductOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductOrder indicates an expected call of GetProductOrder.
func (mr *MockStoreMockRecorder) GetProductOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductOrder", reflect.TypeOf((*MockStore)(nil).GetProductOrder), arg0, arg1)
}

// GetProductType mocks base method.
func (m *MockStore) GetProductType(arg0 context.Context, arg1 int64) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductType", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductType indicates an expected call of GetProductType.
func (mr *MockStoreMockRecorder) GetProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductType", reflect.TypeOf((*MockStore)(nil).GetProductType), arg0, arg1)
}

// ListProductCategories mocks base method.
func (m *MockStore) ListProductCategories(arg0 context.Context, arg1 db.ListProductCategoriesParams) ([]db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductCategories indicates an expected call of ListProductCategories.
func (mr *MockStoreMockRecorder) ListProductCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductCategories", reflect.TypeOf((*MockStore)(nil).ListProductCategories), arg0, arg1)
}

// ListProductInventories mocks base method.
func (m *MockStore) ListProductInventories(arg0 context.Context, arg1 db.ListProductInventoriesParams) ([]db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductInventories", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductInventories indicates an expected call of ListProductInventories.
func (mr *MockStoreMockRecorder) ListProductInventories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductInventories", reflect.TypeOf((*MockStore)(nil).ListProductInventories), arg0, arg1)
}

// ListProductOrders mocks base method.
func (m *MockStore) ListProductOrders(arg0 context.Context, arg1 db.ListProductOrdersParams) ([]db.ProductOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductOrders indicates an expected call of ListProductOrders.
func (mr *MockStoreMockRecorder) ListProductOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductOrders", reflect.TypeOf((*MockStore)(nil).ListProductOrders), arg0, arg1)
}

// ListProductTypes mocks base method.
func (m *MockStore) ListProductTypes(arg0 context.Context, arg1 db.ListProductTypesParams) ([]db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductTypes", arg0, arg1)
	ret0, _ := ret[0].([]db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductTypes indicates an expected call of ListProductTypes.
func (mr *MockStoreMockRecorder) ListProductTypes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductTypes", reflect.TypeOf((*MockStore)(nil).ListProductTypes), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// UpdateProductCategory mocks base method.
func (m *MockStore) UpdateProductCategory(arg0 context.Context, arg1 db.UpdateProductCategoryParams) (db.ProductCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCategory", arg0, arg1)
	ret0, _ := ret[0].(db.ProductCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductCategory indicates an expected call of UpdateProductCategory.
func (mr *MockStoreMockRecorder) UpdateProductCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCategory", reflect.TypeOf((*MockStore)(nil).UpdateProductCategory), arg0, arg1)
}

// UpdateProductInventoryQuantity mocks base method.
func (m *MockStore) UpdateProductInventoryQuantity(arg0 context.Context, arg1 db.UpdateProductInventoryQuantityParams) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductInventoryQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductInventoryQuantity indicates an expected call of UpdateProductInventoryQuantity.
func (mr *MockStoreMockRecorder) UpdateProductInventoryQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductInventoryQuantity", reflect.TypeOf((*MockStore)(nil).UpdateProductInventoryQuantity), arg0, arg1)
}

// UpdateProductInventoryQuantityForProduct mocks base method.
func (m *MockStore) UpdateProductInventoryQuantityForProduct(arg0 context.Context, arg1 db.UpdateProductInventoryQuantityForProductParams) (db.ProductInventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductInventoryQuantityForProduct", arg0, arg1)
	ret0, _ := ret[0].(db.ProductInventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductInventoryQuantityForProduct indicates an expected call of UpdateProductInventoryQuantityForProduct.
func (mr *MockStoreMockRecorder) UpdateProductInventoryQuantityForProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductInventoryQuantityForProduct", reflect.TypeOf((*MockStore)(nil).UpdateProductInventoryQuantityForProduct), arg0, arg1)
}

// UpdateProductName mocks base method.
func (m *MockStore) UpdateProductName(arg0 context.Context, arg1 db.UpdateProductNameParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductName", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductName indicates an expected call of UpdateProductName.
func (mr *MockStoreMockRecorder) UpdateProductName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductName", reflect.TypeOf((*MockStore)(nil).UpdateProductName), arg0, arg1)
}

// UpdateProductOrderQuantity mocks base method.
func (m *MockStore) UpdateProductOrderQuantity(arg0 context.Context, arg1 db.UpdateProductOrderQuantityParams) (db.ProductOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductOrderQuantity", arg0, arg1)
	ret0, _ := ret[0].(db.ProductOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductOrderQuantity indicates an expected call of UpdateProductOrderQuantity.
func (mr *MockStoreMockRecorder) UpdateProductOrderQuantity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductOrderQuantity", reflect.TypeOf((*MockStore)(nil).UpdateProductOrderQuantity), arg0, arg1)
}

// UpdateProductType mocks base method.
func (m *MockStore) UpdateProductType(arg0 context.Context, arg1 db.UpdateProductTypeParams) (db.ProductType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductType", arg0, arg1)
	ret0, _ := ret[0].(db.ProductType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductType indicates an expected call of UpdateProductType.
func (mr *MockStoreMockRecorder) UpdateProductType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductType", reflect.TypeOf((*MockStore)(nil).UpdateProductType), arg0, arg1)
}
