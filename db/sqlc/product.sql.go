// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (
    name,
    description_long,
    description_short,
    price,
    product_type_id,
    product_category_id,
    product_inventory_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, description_long, description_short, price, product_type_id, product_category_id, product_inventory_id, created_at, updated_at
`

type CreateProductParams struct {
	Name               string         `json:"name"`
	DescriptionLong    sql.NullString `json:"description_long"`
	DescriptionShort   sql.NullString `json:"description_short"`
	Price              int32          `json:"price"`
	ProductTypeID      int64          `json:"product_type_id"`
	ProductCategoryID  sql.NullInt64  `json:"product_category_id"`
	ProductInventoryID int64          `json:"product_inventory_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.DescriptionLong,
		arg.DescriptionShort,
		arg.Price,
		arg.ProductTypeID,
		arg.ProductCategoryID,
		arg.ProductInventoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DescriptionLong,
		&i.DescriptionShort,
		&i.Price,
		&i.ProductTypeID,
		&i.ProductCategoryID,
		&i.ProductInventoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description_long, description_short, price, product_type_id, product_category_id, product_inventory_id, created_at, updated_at FROM product
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DescriptionLong,
		&i.DescriptionShort,
		&i.Price,
		&i.ProductTypeID,
		&i.ProductCategoryID,
		&i.ProductInventoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description_long, description_short, price, product_type_id, product_category_id, product_inventory_id, created_at, updated_at FROM product
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DescriptionLong,
			&i.DescriptionShort,
			&i.Price,
			&i.ProductTypeID,
			&i.ProductCategoryID,
			&i.ProductInventoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductName = `-- name: UpdateProductName :one
UPDATE product
SET name = $2
WHERE id = $1
RETURNING id, name, description_long, description_short, price, product_type_id, product_category_id, product_inventory_id, created_at, updated_at
`

type UpdateProductNameParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateProductName(ctx context.Context, arg UpdateProductNameParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductName, arg.ID, arg.Name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DescriptionLong,
		&i.DescriptionShort,
		&i.Price,
		&i.ProductTypeID,
		&i.ProductCategoryID,
		&i.ProductInventoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
