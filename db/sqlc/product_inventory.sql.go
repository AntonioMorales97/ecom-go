// Code generated by sqlc. DO NOT EDIT.
// source: product_inventory.sql

package db

import (
	"context"
)

const createProductInventory = `-- name: CreateProductInventory :one
INSERT INTO product_inventory (
    quantity
) VALUES (
    $1
) RETURNING id, quantity, created_at, updated_at
`

func (q *Queries) CreateProductInventory(ctx context.Context, quantity int32) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, createProductInventory, quantity)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductInventory = `-- name: DeleteProductInventory :exec
DELETE FROM product_inventory
WHERE id = $1
`

func (q *Queries) DeleteProductInventory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProductInventory, id)
	return err
}

const getProductInventory = `-- name: GetProductInventory :one
SELECT id, quantity, created_at, updated_at FROM product_inventory
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductInventory(ctx context.Context, id int64) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, getProductInventory, id)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductInventoryForProduct = `-- name: GetProductInventoryForProduct :one
SELECT id, quantity, created_at, updated_at FROM product_inventory
WHERE id = (SELECT product_inventory_id FROM product
            WHERE product.id = $1 LIMIT 1)
LIMIT 1
`

func (q *Queries) GetProductInventoryForProduct(ctx context.Context, id int64) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, getProductInventoryForProduct, id)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductInventoryForProductForUpdate = `-- name: GetProductInventoryForProductForUpdate :one
SELECT id, quantity, created_at, updated_at FROM product_inventory
WHERE id = (SELECT product_inventory_id FROM product
            WHERE product.id = $1 LIMIT 1)
LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetProductInventoryForProductForUpdate(ctx context.Context, id int64) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, getProductInventoryForProductForUpdate, id)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductInventories = `-- name: ListProductInventories :many
SELECT id, quantity, created_at, updated_at FROM product_inventory
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductInventoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductInventories(ctx context.Context, arg ListProductInventoriesParams) ([]ProductInventory, error) {
	rows, err := q.db.QueryContext(ctx, listProductInventories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductInventory
	for rows.Next() {
		var i ProductInventory
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductInventoryQuantity = `-- name: UpdateProductInventoryQuantity :one
UPDATE product_inventory
SET quantity = $2
WHERE id = $1
RETURNING id, quantity, created_at, updated_at
`

type UpdateProductInventoryQuantityParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateProductInventoryQuantity(ctx context.Context, arg UpdateProductInventoryQuantityParams) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, updateProductInventoryQuantity, arg.ID, arg.Quantity)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProductInventoryQuantityForProduct = `-- name: UpdateProductInventoryQuantityForProduct :one
UPDATE product_inventory
SET quantity = quantity + $2
WHERE id = (SELECT product_inventory_id FROM product
            WHERE product.id = $1 LIMIT 1)
RETURNING id, quantity, created_at, updated_at
`

type UpdateProductInventoryQuantityForProductParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateProductInventoryQuantityForProduct(ctx context.Context, arg UpdateProductInventoryQuantityForProductParams) (ProductInventory, error) {
	row := q.db.QueryRowContext(ctx, updateProductInventoryQuantityForProduct, arg.ID, arg.Quantity)
	var i ProductInventory
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
